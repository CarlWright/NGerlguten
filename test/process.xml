<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE document SYSTEM "document.dtd">
<document>
  <documentinfo>
    <system>Erlang Systems</system>
    <type>Design and Configuration Process</type>
    <reference>CDOC XXXX</reference>
    <author>Sean Hinde</author>
    <version>0.1</version>
    <date>8th March 2004</date>
  </documentinfo>

<references>

</references>

<history>
  <version>
    <vsn>0.1</vsn>
    <status>Draft</status>
    <date>8th March 2004</date>
    <changes>Initial Version</changes>
    <author>Sean Hinde</author>
  </version>
</history>

<scope>
This document describes the design and configuration management
process used for Erlang based systems.
</scope>

<purpose>
The purpose of this document is to ensure that all systems meet a
basic set of maintainability targets
</purpose>

<sect1><title>Erlang Application Structure</title>

  <para>Erlang based applications have a structure defined by Ericsson as
    part of the OTP framework. A complete system is built from an
    Ericsson supplied runtime system and set of OTP
    Applications. These OTP Applications will include standard
    applications supplied by Ericsson (including as a minimum kernel
    and stdlib) and additional applications written by T-Mobile or 3rd
    parties. Regardless of the origin of the OTP Applications the same
    structure must be followed for all systems.
  </para>

<!--
  <image src="test.jpg"/>
-->
  <para>
    All code for each individual OTP Application is structured in the
    filesystem and CVS repository following the standard OTP directory
    structure:
  </para>
<!--
 <image src="test1.jpg"/>
 <image src="test1.jpg"/> 
-->
  <code>
app_name/src/
        /priv/
        /doc/
        /ebin/
        /vsn.mk
  </code>
  <list>
    <item>
      <code>src</code> contains all Erlang source code files (also
      referred to as modules) plus the <code>app_name.app.src</code>
      and <code>Emakefile.src</code> files
    </item>
    <item>
      <code>priv</code> contains config files, port programs, esp
      dynamic web page templates etc
    </item>
    <item><code>doc</code> contains the generated edoc source code documentation</item>
    <item>
      <code>ebin</code> is an empty directory which will contain the compiled
      Erlang .beam files after building.
    </item>     
    <item>
      <code>vsn.mk</code> is a file containing a single line which contains the OTP
      application version number
    </item>
  </list>

  <sect2><title>The <code>vsn.mk</code> file</title>
    <para>
      The structure of the vsn.mk file is as below:
    </para>

    <code>
	  APP_NAME_VSN = 1.0
    </code>

    <para>
      This version string relates to the overall version of the OTP
      application. It is automatically included into the appropriate
      places by the release building routines.
    </para>
  </sect2>

  <sect2><title>The <code>app_name.app.src</code> file</title>
    <para>
      All applications must have an <code>app_name.app.src</code>
      file. This file should be stored in the src sub-directory of the
      app_name directory. This is the standard
      OTP <code>app_name.app</code> file which will ultimately be
      located in the ebin directory and used by the build system to
      create the overall boot script for the
      system. The <code>.src</code> version is parameterised by the
      application version number <code>APP_NAME_VSN</code> from
      the <code>vsn.mk</code> file. For example:
    </para>
    <code>
{application, app_name,
        [{description, "Mission Critical Application"},
         {vsn, "%APP_NAME_VSN%"},
         {modules, [app_name,
                    app_name_app,
                    app_name_db,
                    app_name_lib,
                    app_name_server,
                    app_name_sms,
                    app_name_sup,
                    app_name_test,
                    app_name_web]},
         {registered, [	app_name_sup, app_name_server]},
         {applications, [kernel, stdlib]},
	 {mod, {app_name_app, []}}]}.
    </code>
  </sect2>
  <sect2><title>Adding a new OTP Application</title>
    <para>
      Every OTP application must have an entry created in the Master
      CVS control file <code>Modules</code>. This entry ensures that
      the correct shell scripts are run after the export part of a
      system build.
    </para>
  </sect2>
</sect1>

<sect1><title>Version Management</title>
  <para>
    Version Management is carried out at a number of different levels
    following the standard Ericsson derived OTP scheme. Individual OTP
    applications have their own version number and independent upgrade
    paths. System level versioning is handled via the standard OTP
    release (<code>.rel</code>) file.
  </para>
  <para>
    The version control system used currently is CVS. CVS has a
    number of small limitations which drive some of the details of
    the versioning scheme (particularly tag naming).
  </para>


  <sect2><title>Code Module Level Versioning</title>
    <para>
      All source code files (Erlang modules) must have a vsn attribute
      included in the form:
    </para>
    <code>
-vsn('$Id$').
    </code>
    <para>
      This will be expanded by CVS to include all the required version
      info after ever check in. This vsn Id is used by the build
      system and also by tools built into the web gui of every
      application to query currently running code versions.
    </para>
  </sect2>

  <sect2><title>OTP Application Level Versioning</title>
    <para>
      The CVS tagging mechanism is used to track released files. Tags are
      applied at the OTP application level and below.
    </para>
    
    <sect3><title>Format of CVS version tags</title>
      <para>
        Tags are always created in a standard format. When a release
        of an OTP application level subsystem is made, all files in
        the
        <code>app_name/*</code> directory must be tagged with a tag
        of precisely the form <code>rel-1-0</code>. The hyphens are
        important, as is the quantity of numbering levels.
      </para>
      <para>
        Interim and bug fix releases of the OTP application or files
        within it must be tagged with a special tag format which hold
        the base release version and the patch level reached. Files
        released between up-issues of the overall application version
        number should therefore be tagged according to the following
        convention: <code>rel-1-0-dcr175</code> where
        the <code>-dcr175</code> part relates to the change request
        number this change was issued in. The build management tools
        understand this format and ensure that anyone asking
        for <code>rel-1-0</code> automatically pick up the latest bug
        fix releases in version 1.0 while warning them that this is
        what it is doing.
      </para>
    </sect3>

    <sect3><title>When to increment the OTP Application version number</title>
      <para>
        An OTP Application level subsystem should have its main
        version number incremented in the following situations:
      </para>
      <list>
        <item>
          When a new system is being released which incorporates this
          OTP application and there have been any patches released on
          top of the current version of the application
          (i.e. any <code>rel-x-y-dcr-xxx</code> patches exist for the
          current <code>rel-x-y</code> version.
        </item>
        <item>
          When any non-backwards compatible change is made to any external API
          provided by the OTP application
        </item>
        <item>
          When any source code files are added or removed from the application
        </item>
      </list>
      <para>
        In other words the only time that the OTP Application version
        number should not be increased after a code change in one of
        its modules is when a change or fix is being released for an
        existing live system and none of the reasons given above
        apply.
      </para>
    </sect3>
  </sect2>

  <sect2><title>System Release Level Versioning</title>
    <para>
      The version of an overall system is controlled by a single
      file
      called <code>system_name-1.0.rel</code>. The <code>-1.0</code>
      part of this name is significant as it defines the overall
      version of the system. This file also controls the startup
      order of the OTP Applications within the system.
    </para>
    <sect3><title>Format of System Level Release File</title>
      <para>
        The <code>system_name-1.0.rel</code> file takes the form of this example:
      </para>
      <code>
{release, {"SYSTEM_NAME Transaction Server","system_name-1.0"}, 
 {erts, "5.3"},
 [{kernel,"2.9"},
  {stdlib,"1.12"},
  {sasl, "1.10"},
  {runtime_tools, "1.4"},
  {os_mon, "1.6.1"},
  {snmp, "3.4"},
  {crypto, "1.2"},
  {ssl, "3.0.1"},
  {mnesia, "4.1.4"},
  {inets, "3.0.6"},
  {asn1, "1.4.2"},
  {shlib, "2.0"},
  {connector, "1.0"},
  {xmerl, "0.18"},
  {checksum, "1.0"},
  {audit_log, "1.0"},
  {cron, "1.0"},
  {stats, "1.1"},
  {alarms, "1.0"},
  {metrica, "1.0"},
  {bos, "1.0"},
  {http_mgr, "1.3"},
  {db_backup, "1.0"},
  {tcp_client, "1.1"},
  {xtc_client, "1.0"},
  {grouse, "2.4"},
  {events, "1.1"},
  {app_name, "1.0"}]}.
      </code>
      <para>
        The first line has two parameters - the system name and
        version, and the Erlang runtime system version.
      </para>
      <para>
        Each line in the rest of the file lists an OTP application
        with its version number. Applications will be started in the
        order they appear in the list. The version number here must
        match the CVS Tag for the application or the build system will
        complain. So the tag <code>rel-1-0</code> as applied to the
        CVS repository would match a version number <code>"1.0"</code>
        in this table.
      </para>
      <para>
        Note that a tag <code>rel-1-0-dcr175</code> will also match
        the version numnber <code>"1.0"</code> in this list, and the
        build system will simply warn you that you are picking up some
        patches.
      </para>
    </sect3>
  </sect2>
</sect1>
<sect1><title>Documentation</title>
  <para>
    The following documents are required for every system delivered to the customer:
  </para>
  <list>
    <item>
      High Level Design
    </item>
    <item>
      Detailed Design
    </item>
    <item>
      User Guide
    </item>
    <item>
      Release Notes
    </item>
    <item>
      Code Documentation
    </item>
  </list>
  <para>
    Code documentation should be created in edoc format embedded
    within the code. Other documents may be created using either MS
    Word or created as XML files (preferred).
  </para>
  <sect2><title>Code Documentation</title>
    <para>
      Code documentation should be embedded in the source code files
      and processed with the edoc tool to extract the documentation
      into a set of web pages for the application.
    </para>
    <para>
      Each module should have a top level document describing its
      purpose and place in the OTP application. All exported functions
      should be documented including @spec type information.
    </para>
    <para>
      Created documents should be updated after every change. The
      contents of the doc directory should be tagged excatly the same
      as the rest of the files associated with the OTP Application
      (Check - this should not be strictly neccessary, but is useful
      for online browsing of docs).
    </para>
  </sect2>
  <sect2><title>System Documentation - XML based</title>
    <para>
      The objective of the XML based documentation ystem is to reduce
      the amount of duplication associated with producing the whole
      set of documentation. The documentation is created as a set of
      sections which are pulled together in different way to make
      e.g. a High Level design or Detailed design. The sections to be
      produced should include:
    </para>
    <list>
      <item>
        Master document including the system meta data
      </item>
      <item>
        Introduction to the system
      </item>
      <item>
        Database table desctiptions
      </item>
      <item>
        Stats Counter Descriptions
      </item>
      <item>
        Log File Descriptions
      </item>
      <item>
        User Manual for the web based pages associated solely with
        this application. Each of the other included OTP Applications
        will include their own contribution to the User Guide of a
        system.
      </item>
    </list>
    <para>
      System documents should be stored in the doc subdirectory of the
      system_name_rel CVS Module (Check).
    </para>
    <para>
      Each system shall have a set of XML Source documents
      produced. These documents will be processed into PDF files and
      web pages during the system build process (TODO).
    </para>
  </sect2>
</sect1>
<notes>
  Where to store release files, sys.config, and track real released versions
  Location of config files.
  Making the config location independent
  Installing on the tergat esystem
  Following the release build process
  Creating Certificates
  Cookies
  sys.config
  Top level directroies in a target system
  module naming convention
</notes>
</document>
